version: "3.8"

# ==============================================
# Full-Stack E-commerce Docker Compose
# ==============================================
# This file orchestrates:
# - MongoDB Database
# - Node.js Backend API
# - Angular Frontend with SSR
# - Nginx Reverse Proxy
# ==============================================

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: ecommerce-db
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE:-egyptfishar}
    volumes:
      - mongodb_data:/data/db
      - ./backend/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Backend API
  ecommerce-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ecommerce-api
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=${MONGODB_URI:-mongodb://admin:password@mongodb:27017/egyptfishar?authSource=admin}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT_EXPIRE=${JWT_EXPIRE:-7d}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:4000,http://localhost:80,http://localhost}
    volumes:
      - uploads_data:/app/server/uploads
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend with SSR
  ecommerce-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ecommerce-frontend
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - API_URL=http://ecommerce-backend:5000
    restart: unless-stopped
    depends_on:
      ecommerce-backend:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:4000",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend/nginx-fullstack.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - ecommerce-backend
      - ecommerce-frontend
    restart: unless-stopped
    networks:
      - ecommerce-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:80/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  uploads_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
