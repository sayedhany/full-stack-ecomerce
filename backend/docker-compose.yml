version: '3.8'

services:
  # E-commerce Backend API
  ecommerce-backend:
    build: .
    container_name: ecommerce-api
    ports:
      - "5000:5000"
    environment:
      # Use environment variables or .env file
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=${JWT_EXPIRE}
    volumes:
      # Persistent storage for uploads (optional)
      - uploads_data:/app/server/uploads
    restart: unless-stopped
    depends_on:
      - mongodb
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database (optional - if not using MongoDB Atlas)
  mongodb:
    image: mongo:7.0
    container_name: ecommerce-db
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=egyptfishar
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    networks:
      - ecommerce-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates (if using HTTPS)
    depends_on:
      - ecommerce-backend
    restart: unless-stopped
    networks:
      - ecommerce-network

volumes:
  mongodb_data:
    driver: local
  uploads_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge